package com.reposhield.dependency_scanner.service;

import com.reposhield.dependency_scanner.model.Dependency;
import com.reposhield.dependency_scanner.model.Vulnerability;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service for detecting vulnerabilities in dependencies.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class VulnerabilityService {

    private final NvdClient nvdClient;
    private final SeverityCalculator severityCalculator;

    /**
     * Scans a list of dependencies for vulnerabilities.
     */
    public List<Vulnerability> scanDependencies(List<Dependency> dependencies) {
        log.info("Scanning {} dependencies for vulnerabilities", dependencies.size());

        List<Vulnerability> allVulnerabilities = new ArrayList<>();

        for (Dependency dependency : dependencies) {
            try {
                log.debug("Checking dependency: {}", dependency.getName());
                List<Vulnerability> vulnerabilities = nvdClient.findVulnerabilities(dependency);

                // Normalize severity levels
                vulnerabilities.forEach(v ->
                        v.setSeverity(severityCalculator.normalizeSeverity(v.getSeverity()))
                );

                allVulnerabilities.addAll(vulnerabilities);
            } catch (Exception e) {
                log.error("Error scanning dependency {}: {}", dependency.getName(), e.getMessage());
                // Continue with next dependency rather than failing the whole scan
            }
        }

        log.info("Found {} vulnerabilities in total", allVulnerabilities.size());
        return allVulnerabilities;
    }

    /**
     * Gets high severity vulnerabilities from a list.
     */
    public List<Vulnerability> getHighSeverityVulnerabilities(List<Vulnerability> vulnerabilities) {
        return vulnerabilities.stream()
                .filter(v -> {
                    String severity = v.getSeverity();
                    return "CRITICAL".equals(severity) || "HIGH".equals(severity);
                })
                .collect(Collectors.toList());
    }
}